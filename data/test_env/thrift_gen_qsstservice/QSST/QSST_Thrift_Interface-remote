#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import QSST_Thrift_Interface
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  void wakeUpDevice()'
  print '  void unregisterAlarmer()'
  print '  void send_mms(string smsto, string content)'
  print '  bool mt_trigger_service( map_trigger)'
  print '  string get_postion()'
  print '  string get_speed()'
  print '  string get_battery_temperate(string unit)'
  print '  string get_orientation()'
  print '  string get_available_ram()'
  print '  string get_available_rom()'
  print '  string get_wifi_rssi()'
  print '  string get_sim_card_state(i32 slotId)'
  print '  string get_sim_card_rssi(i32 slotId)'
  print '  string get_sim_card_vendor(string slotId)'
  print '  bool is_bluetooth_enabled()'
  print '  bool is_wifi_enabled()'
  print '  string get_networktype(i32 slotId)'
  print '  void update_notificationbar(string text)'
  print '  void interactWithUserBySingleBtn(string title, string msg, string send_to, string send_msg, bool enable_ring_shake, i32 wait_timeout)'
  print '  i32 interactWithUserByMultiBtn(string title, string msg,  btns, string send_to, string send_msg, bool enable_ring_shake, i32 wait_timeout, i32 default_result)'
  print '  i32 interactWithUserByList(string title, string msg,  value, string send_to, string send_msg, bool enable_ring_shake, i32 wait_timeout, i32 default_result)'
  print '  bool goToSleepMode(i32 interval)'
  print '  void get_value_from_client(string name, string value)'
  print '  string getBluetoothName()'
  print '  string getSerialNum()'
  print '  void disable_watcher_anr_fc(bool flag)'
  print '  string get_ftp_tp_info(string ftpUrl, i32 ftpPort, string username, string pwd, string filePath, string directory, string operation, bool localActive)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = QSST_Thrift_Interface.Client(protocol)
transport.open()

if cmd == 'wakeUpDevice':
  if len(args) != 0:
    print 'wakeUpDevice requires 0 args'
    sys.exit(1)
  pp.pprint(client.wakeUpDevice())

elif cmd == 'unregisterAlarmer':
  if len(args) != 0:
    print 'unregisterAlarmer requires 0 args'
    sys.exit(1)
  pp.pprint(client.unregisterAlarmer())

elif cmd == 'send_mms':
  if len(args) != 2:
    print 'send_mms requires 2 args'
    sys.exit(1)
  pp.pprint(client.send_mms(args[0],args[1],))

elif cmd == 'mt_trigger_service':
  if len(args) != 1:
    print 'mt_trigger_service requires 1 args'
    sys.exit(1)
  pp.pprint(client.mt_trigger_service(eval(args[0]),))

elif cmd == 'get_postion':
  if len(args) != 0:
    print 'get_postion requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_postion())

elif cmd == 'get_speed':
  if len(args) != 0:
    print 'get_speed requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_speed())

elif cmd == 'get_battery_temperate':
  if len(args) != 1:
    print 'get_battery_temperate requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_battery_temperate(args[0],))

elif cmd == 'get_orientation':
  if len(args) != 0:
    print 'get_orientation requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_orientation())

elif cmd == 'get_available_ram':
  if len(args) != 0:
    print 'get_available_ram requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_available_ram())

elif cmd == 'get_available_rom':
  if len(args) != 0:
    print 'get_available_rom requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_available_rom())

elif cmd == 'get_wifi_rssi':
  if len(args) != 0:
    print 'get_wifi_rssi requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_wifi_rssi())

elif cmd == 'get_sim_card_state':
  if len(args) != 1:
    print 'get_sim_card_state requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_sim_card_state(eval(args[0]),))

elif cmd == 'get_sim_card_rssi':
  if len(args) != 1:
    print 'get_sim_card_rssi requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_sim_card_rssi(eval(args[0]),))

elif cmd == 'get_sim_card_vendor':
  if len(args) != 1:
    print 'get_sim_card_vendor requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_sim_card_vendor(args[0],))

elif cmd == 'is_bluetooth_enabled':
  if len(args) != 0:
    print 'is_bluetooth_enabled requires 0 args'
    sys.exit(1)
  pp.pprint(client.is_bluetooth_enabled())

elif cmd == 'is_wifi_enabled':
  if len(args) != 0:
    print 'is_wifi_enabled requires 0 args'
    sys.exit(1)
  pp.pprint(client.is_wifi_enabled())

elif cmd == 'get_networktype':
  if len(args) != 1:
    print 'get_networktype requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_networktype(eval(args[0]),))

elif cmd == 'update_notificationbar':
  if len(args) != 1:
    print 'update_notificationbar requires 1 args'
    sys.exit(1)
  pp.pprint(client.update_notificationbar(args[0],))

elif cmd == 'interactWithUserBySingleBtn':
  if len(args) != 6:
    print 'interactWithUserBySingleBtn requires 6 args'
    sys.exit(1)
  pp.pprint(client.interactWithUserBySingleBtn(args[0],args[1],args[2],args[3],eval(args[4]),eval(args[5]),))

elif cmd == 'interactWithUserByMultiBtn':
  if len(args) != 8:
    print 'interactWithUserByMultiBtn requires 8 args'
    sys.exit(1)
  pp.pprint(client.interactWithUserByMultiBtn(args[0],args[1],eval(args[2]),args[3],args[4],eval(args[5]),eval(args[6]),eval(args[7]),))

elif cmd == 'interactWithUserByList':
  if len(args) != 8:
    print 'interactWithUserByList requires 8 args'
    sys.exit(1)
  pp.pprint(client.interactWithUserByList(args[0],args[1],eval(args[2]),args[3],args[4],eval(args[5]),eval(args[6]),eval(args[7]),))

elif cmd == 'goToSleepMode':
  if len(args) != 1:
    print 'goToSleepMode requires 1 args'
    sys.exit(1)
  pp.pprint(client.goToSleepMode(eval(args[0]),))

elif cmd == 'get_value_from_client':
  if len(args) != 2:
    print 'get_value_from_client requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_value_from_client(args[0],args[1],))

elif cmd == 'getBluetoothName':
  if len(args) != 0:
    print 'getBluetoothName requires 0 args'
    sys.exit(1)
  pp.pprint(client.getBluetoothName())

elif cmd == 'getSerialNum':
  if len(args) != 0:
    print 'getSerialNum requires 0 args'
    sys.exit(1)
  pp.pprint(client.getSerialNum())

elif cmd == 'disable_watcher_anr_fc':
  if len(args) != 1:
    print 'disable_watcher_anr_fc requires 1 args'
    sys.exit(1)
  pp.pprint(client.disable_watcher_anr_fc(eval(args[0]),))

elif cmd == 'get_ftp_tp_info':
  if len(args) != 8:
    print 'get_ftp_tp_info requires 8 args'
    sys.exit(1)
  pp.pprint(client.get_ftp_tp_info(args[0],eval(args[1]),args[2],args[3],args[4],args[5],args[6],eval(args[7]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
