#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import GroupTestMEService
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  i32 databaseExecuteUpdate(string statement)'
  print '  DataBaseQueryResult databaseExecuteQuery(string statement)'
  print '  void initLog()'
  print '  void mkdir(string dir)'
  print '  void clearAdbLog()'
  print '  i32 startCaptureAdbLog(string cmd)'
  print '  void stopCaptureAdbLog(i32 pid)'
  print '  bool loadConfiguration(string file)'
  print '  bool comPort(string port)'
  print '  bool clearViewItems()'
  print '  bool saveItemStore(string path)'
  print '  bool quitQXDM()'
  print '  string getSerialNumber()'
  print '  bool startNewTrack(string name, string description)'
  print '  bool pauseCurrentTrack()'
  print '  bool endCurrentTrack()'
  print '  bool endCurrentTrackAndExportKML()'
  print '  bool resumeCurrentTrack()'
  print '  bool insertWaypoint(string name, string description, string category, string serialNumber)'
  print '  i64 getRecordingTrackId()'
  print '  i32 invokeHostCmd(string cmdFilePath, string params)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = GroupTestMEService.Client(protocol)
transport.open()

if cmd == 'databaseExecuteUpdate':
  if len(args) != 1:
    print 'databaseExecuteUpdate requires 1 args'
    sys.exit(1)
  pp.pprint(client.databaseExecuteUpdate(args[0],))

elif cmd == 'databaseExecuteQuery':
  if len(args) != 1:
    print 'databaseExecuteQuery requires 1 args'
    sys.exit(1)
  pp.pprint(client.databaseExecuteQuery(args[0],))

elif cmd == 'initLog':
  if len(args) != 0:
    print 'initLog requires 0 args'
    sys.exit(1)
  pp.pprint(client.initLog())

elif cmd == 'mkdir':
  if len(args) != 1:
    print 'mkdir requires 1 args'
    sys.exit(1)
  pp.pprint(client.mkdir(args[0],))

elif cmd == 'clearAdbLog':
  if len(args) != 0:
    print 'clearAdbLog requires 0 args'
    sys.exit(1)
  pp.pprint(client.clearAdbLog())

elif cmd == 'startCaptureAdbLog':
  if len(args) != 1:
    print 'startCaptureAdbLog requires 1 args'
    sys.exit(1)
  pp.pprint(client.startCaptureAdbLog(args[0],))

elif cmd == 'stopCaptureAdbLog':
  if len(args) != 1:
    print 'stopCaptureAdbLog requires 1 args'
    sys.exit(1)
  pp.pprint(client.stopCaptureAdbLog(eval(args[0]),))

elif cmd == 'loadConfiguration':
  if len(args) != 1:
    print 'loadConfiguration requires 1 args'
    sys.exit(1)
  pp.pprint(client.loadConfiguration(args[0],))

elif cmd == 'comPort':
  if len(args) != 1:
    print 'comPort requires 1 args'
    sys.exit(1)
  pp.pprint(client.comPort(args[0],))

elif cmd == 'clearViewItems':
  if len(args) != 0:
    print 'clearViewItems requires 0 args'
    sys.exit(1)
  pp.pprint(client.clearViewItems())

elif cmd == 'saveItemStore':
  if len(args) != 1:
    print 'saveItemStore requires 1 args'
    sys.exit(1)
  pp.pprint(client.saveItemStore(args[0],))

elif cmd == 'quitQXDM':
  if len(args) != 0:
    print 'quitQXDM requires 0 args'
    sys.exit(1)
  pp.pprint(client.quitQXDM())

elif cmd == 'getSerialNumber':
  if len(args) != 0:
    print 'getSerialNumber requires 0 args'
    sys.exit(1)
  pp.pprint(client.getSerialNumber())

elif cmd == 'startNewTrack':
  if len(args) != 2:
    print 'startNewTrack requires 2 args'
    sys.exit(1)
  pp.pprint(client.startNewTrack(args[0],args[1],))

elif cmd == 'pauseCurrentTrack':
  if len(args) != 0:
    print 'pauseCurrentTrack requires 0 args'
    sys.exit(1)
  pp.pprint(client.pauseCurrentTrack())

elif cmd == 'endCurrentTrack':
  if len(args) != 0:
    print 'endCurrentTrack requires 0 args'
    sys.exit(1)
  pp.pprint(client.endCurrentTrack())

elif cmd == 'endCurrentTrackAndExportKML':
  if len(args) != 0:
    print 'endCurrentTrackAndExportKML requires 0 args'
    sys.exit(1)
  pp.pprint(client.endCurrentTrackAndExportKML())

elif cmd == 'resumeCurrentTrack':
  if len(args) != 0:
    print 'resumeCurrentTrack requires 0 args'
    sys.exit(1)
  pp.pprint(client.resumeCurrentTrack())

elif cmd == 'insertWaypoint':
  if len(args) != 4:
    print 'insertWaypoint requires 4 args'
    sys.exit(1)
  pp.pprint(client.insertWaypoint(args[0],args[1],args[2],args[3],))

elif cmd == 'getRecordingTrackId':
  if len(args) != 0:
    print 'getRecordingTrackId requires 0 args'
    sys.exit(1)
  pp.pprint(client.getRecordingTrackId())

elif cmd == 'invokeHostCmd':
  if len(args) != 2:
    print 'invokeHostCmd requires 2 args'
    sys.exit(1)
  pp.pprint(client.invokeHostCmd(args[0],args[1],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
