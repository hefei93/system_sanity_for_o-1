#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import Uiautomator_Thrift_Interface
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  void click_textview_by_id(string _id, i32 isVerticalList, i32 isScrollable, i32 waitForView, string clickType)'
  print '  void click_textview_by_text(string text, i32 isVerticalList, i32 isScrollable, string searchFlag, i32 waitForView, string clickType)'
  print '  void click_textview_by_desc(string desc, i32 isVerticalList, i32 isScrollable, i32 waitForView, string clickType)'
  print '  bool get_textview_select_by_text(string text)'
  print '  string get_view_text_by_id(string view_type, string _id, i32 isVerticalList, i32 isScrollable)'
  print '  string get_view_text_by_index(string view_type, i32 index)'
  print '  void click_textview_by_index(i32 index)'
  print '  void click_in_list_by_index(i32 index, i32 isVerticalList, i32 isScrollable, i32 waitForView, string clickType)'
  print '  void click_menuitem_by_text(string text, i32 isVerticalList, i32 isScrollable, string searchFlag, i32 waitForView, string clickType)'
  print '  void click_imageview_by_index(i32 index)'
  print '  void click_imageview_by_id(string _id, i32 isVerticalList, i32 isScrollable, i32 waitForView, string clickType)'
  print '  void click_imageview_by_desc(string desc, i32 isVerticalList, i32 isScrollable, i32 waitForView, string clickType)'
  print '  void click_button_by_index(i32 index)'
  print '  void click_button_by_id(string _id, i32 isVerticalList, i32 isScrollable, i32 waitForView, string clickType)'
  print '  void click_button_by_text(string text, i32 isVerticalList, i32 isScrollable, string searchFlag, i32 waitForView, string clickType)'
  print '  void click_checkbox_by_index(i32 index)'
  print '  void click_checkbox_by_id(string _id, i32 isVerticalList, i32 isScrollable, i32 waitForView, string clickType)'
  print '  void click_view_by_container_id(string _id, string className, i32 index)'
  print '  void click_view_by_container_desc(string desc, string className, i32 index)'
  print '  void long_click(i32 x, i32 y)'
  print '  void double_click(i32 x, i32 y)'
  print '  void send_key(string key, string keyType)'
  print '  void drag_by_param(i32 startX, i32 startY, i32 endX, i32 endY, i32 stepCount)'
  print '  void scroll_up()'
  print '  void scroll_down()'
  print '  void scroll_to_bottom()'
  print '  void scroll_to_top()'
  print '  void entertext_edittext_by_id(string _id, string value, i32 isVerticalList, i32 isScrollable, i32 isClear)'
  print '  void entertext_edittext_by_index(i32 index, string value, i32 isVerticalList, i32 isScrollable, i32 isClear)'
  print '  void entertext_edittext_on_focused(string value, i32 isVerticalList, i32 isScrollable, i32 isClear)'
  print '  void clear_edittext_by_id(string _id, i32 isVerticalList, i32 isScrollable)'
  print '  void clear_edittext_by_index(i32 index, i32 isVerticalList, i32 isScrollable)'
  print '  void clear_edittext_on_focused(i32 isVerticalList, i32 isScrollable)'
  print '  void goback(string className, string idType, string id)'
  print '  void shutdown()'
  print '  bool search_text(string text, i32 isVerticalList, i32 isScrollable, string searchFlag)'
  print '  string get_text(string text, i32 isVerticaList, i32 isScrollable, string searchFlag)'
  print '  bool search_webview_title(string title)'
  print '  bool is_checkbox_checked_by_text(string text)'
  print '  bool is_checkbox_checked_by_index(i32 index)'
  print '  bool is_togglebutton_checked_by_text(string text)'
  print '  bool is_togglebutton_checked_by_index(i32 index)'
  print '  bool is_compoundbutton_checked_by_index(i32 index)'
  print '  bool is_view_enabled_by_id(string view_type, string _id, i32 isVerticalList, i32 isScrollable)'
  print '  bool is_view_enabled_by_text(string view_type, string text, i32 isVerticalList, i32 isScrollable, string searchFlag)'
  print '  bool is_view_enabled_by_index(string view_type, i32 index)'
  print '  void set_progressbar_by_index(i32 index, string value)'
  print '  bool search_view_by_id(string _id)'
  print '  bool search_view_by_desc(string desc)'
  print '  bool is_external_storage_enable()'
  print '  string get_system_language()'
  print '  string get_activity_name()'
  print '  void register_update_watcher(string appName, string className, string idType, string id, string action)'
  print '  void register_condition_action_watcher(string packageName_condition, string className_condition, string idType_condition, string id_condition, string action, string className_action, string idType_action, string id_action)'
  print '  void unregister_update_watcher(string appName)'
  print '  void zoom_by_param(string mode, i32 startX1, i32 startY1, i32 startX2, i32 startY2)'
  print '  i32 getDisplayWidth()'
  print '  i32 getDisplayHeight()'
  print '  void goToSleepMode(i32 interval)'
  print '  void enable_scroll_profling()'
  print '  void disable_scroll_profling()'
  print '  void excute(string codes)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Uiautomator_Thrift_Interface.Client(protocol)
transport.open()

if cmd == 'click_textview_by_id':
  if len(args) != 5:
    print 'click_textview_by_id requires 5 args'
    sys.exit(1)
  pp.pprint(client.click_textview_by_id(args[0],eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'click_textview_by_text':
  if len(args) != 6:
    print 'click_textview_by_text requires 6 args'
    sys.exit(1)
  pp.pprint(client.click_textview_by_text(args[0],eval(args[1]),eval(args[2]),args[3],eval(args[4]),args[5],))

elif cmd == 'click_textview_by_desc':
  if len(args) != 5:
    print 'click_textview_by_desc requires 5 args'
    sys.exit(1)
  pp.pprint(client.click_textview_by_desc(args[0],eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'get_textview_select_by_text':
  if len(args) != 1:
    print 'get_textview_select_by_text requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_textview_select_by_text(args[0],))

elif cmd == 'get_view_text_by_id':
  if len(args) != 4:
    print 'get_view_text_by_id requires 4 args'
    sys.exit(1)
  pp.pprint(client.get_view_text_by_id(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'get_view_text_by_index':
  if len(args) != 2:
    print 'get_view_text_by_index requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_view_text_by_index(args[0],eval(args[1]),))

elif cmd == 'click_textview_by_index':
  if len(args) != 1:
    print 'click_textview_by_index requires 1 args'
    sys.exit(1)
  pp.pprint(client.click_textview_by_index(eval(args[0]),))

elif cmd == 'click_in_list_by_index':
  if len(args) != 5:
    print 'click_in_list_by_index requires 5 args'
    sys.exit(1)
  pp.pprint(client.click_in_list_by_index(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'click_menuitem_by_text':
  if len(args) != 6:
    print 'click_menuitem_by_text requires 6 args'
    sys.exit(1)
  pp.pprint(client.click_menuitem_by_text(args[0],eval(args[1]),eval(args[2]),args[3],eval(args[4]),args[5],))

elif cmd == 'click_imageview_by_index':
  if len(args) != 1:
    print 'click_imageview_by_index requires 1 args'
    sys.exit(1)
  pp.pprint(client.click_imageview_by_index(eval(args[0]),))

elif cmd == 'click_imageview_by_id':
  if len(args) != 5:
    print 'click_imageview_by_id requires 5 args'
    sys.exit(1)
  pp.pprint(client.click_imageview_by_id(args[0],eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'click_imageview_by_desc':
  if len(args) != 5:
    print 'click_imageview_by_desc requires 5 args'
    sys.exit(1)
  pp.pprint(client.click_imageview_by_desc(args[0],eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'click_button_by_index':
  if len(args) != 1:
    print 'click_button_by_index requires 1 args'
    sys.exit(1)
  pp.pprint(client.click_button_by_index(eval(args[0]),))

elif cmd == 'click_button_by_id':
  if len(args) != 5:
    print 'click_button_by_id requires 5 args'
    sys.exit(1)
  pp.pprint(client.click_button_by_id(args[0],eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'click_button_by_text':
  if len(args) != 6:
    print 'click_button_by_text requires 6 args'
    sys.exit(1)
  pp.pprint(client.click_button_by_text(args[0],eval(args[1]),eval(args[2]),args[3],eval(args[4]),args[5],))

elif cmd == 'click_checkbox_by_index':
  if len(args) != 1:
    print 'click_checkbox_by_index requires 1 args'
    sys.exit(1)
  pp.pprint(client.click_checkbox_by_index(eval(args[0]),))

elif cmd == 'click_checkbox_by_id':
  if len(args) != 5:
    print 'click_checkbox_by_id requires 5 args'
    sys.exit(1)
  pp.pprint(client.click_checkbox_by_id(args[0],eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'click_view_by_container_id':
  if len(args) != 3:
    print 'click_view_by_container_id requires 3 args'
    sys.exit(1)
  pp.pprint(client.click_view_by_container_id(args[0],args[1],eval(args[2]),))

elif cmd == 'click_view_by_container_desc':
  if len(args) != 3:
    print 'click_view_by_container_desc requires 3 args'
    sys.exit(1)
  pp.pprint(client.click_view_by_container_desc(args[0],args[1],eval(args[2]),))

elif cmd == 'long_click':
  if len(args) != 2:
    print 'long_click requires 2 args'
    sys.exit(1)
  pp.pprint(client.long_click(eval(args[0]),eval(args[1]),))

elif cmd == 'double_click':
  if len(args) != 2:
    print 'double_click requires 2 args'
    sys.exit(1)
  pp.pprint(client.double_click(eval(args[0]),eval(args[1]),))

elif cmd == 'send_key':
  if len(args) != 2:
    print 'send_key requires 2 args'
    sys.exit(1)
  pp.pprint(client.send_key(args[0],args[1],))

elif cmd == 'drag_by_param':
  if len(args) != 5:
    print 'drag_by_param requires 5 args'
    sys.exit(1)
  pp.pprint(client.drag_by_param(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'scroll_up':
  if len(args) != 0:
    print 'scroll_up requires 0 args'
    sys.exit(1)
  pp.pprint(client.scroll_up())

elif cmd == 'scroll_down':
  if len(args) != 0:
    print 'scroll_down requires 0 args'
    sys.exit(1)
  pp.pprint(client.scroll_down())

elif cmd == 'scroll_to_bottom':
  if len(args) != 0:
    print 'scroll_to_bottom requires 0 args'
    sys.exit(1)
  pp.pprint(client.scroll_to_bottom())

elif cmd == 'scroll_to_top':
  if len(args) != 0:
    print 'scroll_to_top requires 0 args'
    sys.exit(1)
  pp.pprint(client.scroll_to_top())

elif cmd == 'entertext_edittext_by_id':
  if len(args) != 5:
    print 'entertext_edittext_by_id requires 5 args'
    sys.exit(1)
  pp.pprint(client.entertext_edittext_by_id(args[0],args[1],eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'entertext_edittext_by_index':
  if len(args) != 5:
    print 'entertext_edittext_by_index requires 5 args'
    sys.exit(1)
  pp.pprint(client.entertext_edittext_by_index(eval(args[0]),args[1],eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'entertext_edittext_on_focused':
  if len(args) != 4:
    print 'entertext_edittext_on_focused requires 4 args'
    sys.exit(1)
  pp.pprint(client.entertext_edittext_on_focused(args[0],eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'clear_edittext_by_id':
  if len(args) != 3:
    print 'clear_edittext_by_id requires 3 args'
    sys.exit(1)
  pp.pprint(client.clear_edittext_by_id(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'clear_edittext_by_index':
  if len(args) != 3:
    print 'clear_edittext_by_index requires 3 args'
    sys.exit(1)
  pp.pprint(client.clear_edittext_by_index(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'clear_edittext_on_focused':
  if len(args) != 2:
    print 'clear_edittext_on_focused requires 2 args'
    sys.exit(1)
  pp.pprint(client.clear_edittext_on_focused(eval(args[0]),eval(args[1]),))

elif cmd == 'goback':
  if len(args) != 3:
    print 'goback requires 3 args'
    sys.exit(1)
  pp.pprint(client.goback(args[0],args[1],args[2],))

elif cmd == 'shutdown':
  if len(args) != 0:
    print 'shutdown requires 0 args'
    sys.exit(1)
  pp.pprint(client.shutdown())

elif cmd == 'search_text':
  if len(args) != 4:
    print 'search_text requires 4 args'
    sys.exit(1)
  pp.pprint(client.search_text(args[0],eval(args[1]),eval(args[2]),args[3],))

elif cmd == 'get_text':
  if len(args) != 4:
    print 'get_text requires 4 args'
    sys.exit(1)
  pp.pprint(client.get_text(args[0],eval(args[1]),eval(args[2]),args[3],))

elif cmd == 'search_webview_title':
  if len(args) != 1:
    print 'search_webview_title requires 1 args'
    sys.exit(1)
  pp.pprint(client.search_webview_title(args[0],))

elif cmd == 'is_checkbox_checked_by_text':
  if len(args) != 1:
    print 'is_checkbox_checked_by_text requires 1 args'
    sys.exit(1)
  pp.pprint(client.is_checkbox_checked_by_text(args[0],))

elif cmd == 'is_checkbox_checked_by_index':
  if len(args) != 1:
    print 'is_checkbox_checked_by_index requires 1 args'
    sys.exit(1)
  pp.pprint(client.is_checkbox_checked_by_index(eval(args[0]),))

elif cmd == 'is_togglebutton_checked_by_text':
  if len(args) != 1:
    print 'is_togglebutton_checked_by_text requires 1 args'
    sys.exit(1)
  pp.pprint(client.is_togglebutton_checked_by_text(args[0],))

elif cmd == 'is_togglebutton_checked_by_index':
  if len(args) != 1:
    print 'is_togglebutton_checked_by_index requires 1 args'
    sys.exit(1)
  pp.pprint(client.is_togglebutton_checked_by_index(eval(args[0]),))

elif cmd == 'is_compoundbutton_checked_by_index':
  if len(args) != 1:
    print 'is_compoundbutton_checked_by_index requires 1 args'
    sys.exit(1)
  pp.pprint(client.is_compoundbutton_checked_by_index(eval(args[0]),))

elif cmd == 'is_view_enabled_by_id':
  if len(args) != 4:
    print 'is_view_enabled_by_id requires 4 args'
    sys.exit(1)
  pp.pprint(client.is_view_enabled_by_id(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'is_view_enabled_by_text':
  if len(args) != 5:
    print 'is_view_enabled_by_text requires 5 args'
    sys.exit(1)
  pp.pprint(client.is_view_enabled_by_text(args[0],args[1],eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'is_view_enabled_by_index':
  if len(args) != 2:
    print 'is_view_enabled_by_index requires 2 args'
    sys.exit(1)
  pp.pprint(client.is_view_enabled_by_index(args[0],eval(args[1]),))

elif cmd == 'set_progressbar_by_index':
  if len(args) != 2:
    print 'set_progressbar_by_index requires 2 args'
    sys.exit(1)
  pp.pprint(client.set_progressbar_by_index(eval(args[0]),args[1],))

elif cmd == 'search_view_by_id':
  if len(args) != 1:
    print 'search_view_by_id requires 1 args'
    sys.exit(1)
  pp.pprint(client.search_view_by_id(args[0],))

elif cmd == 'search_view_by_desc':
  if len(args) != 1:
    print 'search_view_by_desc requires 1 args'
    sys.exit(1)
  pp.pprint(client.search_view_by_desc(args[0],))

elif cmd == 'is_external_storage_enable':
  if len(args) != 0:
    print 'is_external_storage_enable requires 0 args'
    sys.exit(1)
  pp.pprint(client.is_external_storage_enable())

elif cmd == 'get_system_language':
  if len(args) != 0:
    print 'get_system_language requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_system_language())

elif cmd == 'get_activity_name':
  if len(args) != 0:
    print 'get_activity_name requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_activity_name())

elif cmd == 'register_update_watcher':
  if len(args) != 5:
    print 'register_update_watcher requires 5 args'
    sys.exit(1)
  pp.pprint(client.register_update_watcher(args[0],args[1],args[2],args[3],args[4],))

elif cmd == 'register_condition_action_watcher':
  if len(args) != 8:
    print 'register_condition_action_watcher requires 8 args'
    sys.exit(1)
  pp.pprint(client.register_condition_action_watcher(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],))

elif cmd == 'unregister_update_watcher':
  if len(args) != 1:
    print 'unregister_update_watcher requires 1 args'
    sys.exit(1)
  pp.pprint(client.unregister_update_watcher(args[0],))

elif cmd == 'zoom_by_param':
  if len(args) != 5:
    print 'zoom_by_param requires 5 args'
    sys.exit(1)
  pp.pprint(client.zoom_by_param(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'getDisplayWidth':
  if len(args) != 0:
    print 'getDisplayWidth requires 0 args'
    sys.exit(1)
  pp.pprint(client.getDisplayWidth())

elif cmd == 'getDisplayHeight':
  if len(args) != 0:
    print 'getDisplayHeight requires 0 args'
    sys.exit(1)
  pp.pprint(client.getDisplayHeight())

elif cmd == 'goToSleepMode':
  if len(args) != 1:
    print 'goToSleepMode requires 1 args'
    sys.exit(1)
  pp.pprint(client.goToSleepMode(eval(args[0]),))

elif cmd == 'enable_scroll_profling':
  if len(args) != 0:
    print 'enable_scroll_profling requires 0 args'
    sys.exit(1)
  pp.pprint(client.enable_scroll_profling())

elif cmd == 'disable_scroll_profling':
  if len(args) != 0:
    print 'disable_scroll_profling requires 0 args'
    sys.exit(1)
  pp.pprint(client.disable_scroll_profling())

elif cmd == 'excute':
  if len(args) != 1:
    print 'excute requires 1 args'
    sys.exit(1)
  pp.pprint(client.excute(args[0],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
